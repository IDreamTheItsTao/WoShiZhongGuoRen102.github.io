<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[搞定MySQL]]></title>
    <url>%2F2019%2F04%2F24%2Fsql01%2F</url>
    <content type="text"><![CDATA[数据库 - 实现数据持久化以及数据管理 持久化 将数据保存到（在掉电情况下）能够长久保存数据的存储介质中数据库的分类 关系型数据库(SQL) 、非关系型数据库(NoSQL)关系型数据库概述 关系型数据库发展史: 网状数据库、层次数据库、关系数据库 1970年，IBM的研究员E.F.Codd在Communication of the ACM上发表了名为A Relational Model of Data for Large Shared Data Banks的论文，提出了关系模型的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。 理论基础：关系代数和集合论 关系型数据库产品： Oracle (甲骨文公司) 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在Oracle最新的12c版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。 DB2 (IBM) 主要运行于Unix（包括IBM自家的AIX）、Linux、以及Windows服务器版等系统的关系数据库产品。DB2历史悠久且被认为是最早使用SQL的数据库产品，它拥有较为强大的商业智能功能。 SQLServer (Microsoft)最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。 MySQL MySQL是开放源代码的，任何人都可以在GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。 Sybase PostgreSQL 在BSD许可证下发行的开发源代码的关系数据库产品。 具体表象:用二维表来保存数据 行(记录) 列(字段) 主键列:能够唯一标识一条记录的列，例如：学生学号 编程语言:SQL - 结构化查询语言 DDL 数据定义语言 create / drop / alter DML 数据操作语言 insert / delete / update / select DCL 数据控制语言 grant / revoke ER图(实体关系图/概念模型图)矩形框：实体 椭圆框：实体的属性 菱形框：实体之间的关系 关系的重数：一对一/一对多/多对多 画图工具：PowerDesigner linux环境下启动Mariadb启动和查看程序进程12启动 ——&gt; 查看是否有进程(4个方法)方法4. systemctl status mariadb 查看数据库版本 连接navicat可视化界面 ==第一步==：连接 12密码是：该用户登录的密码点击连接测试 ——&gt; 成功后点击连接 ==第二步==：授予root所有权限 SQL结构化查询语言(Mysql)注意： 给数据库和表命名时尽量使用小写; 作为筛选条件的字符串是否区分大小，看校对规则(collate utf8_general_ci ci——&gt; case insensitive) 数据库中的对象通常会用前缀加以区分 数据库增删以及表格增删改123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131-- 如果存在名为school的数据库就删除它drop database if exists school;-- 创建名为school的数据库并设置默认的字符集和排序方式create database school default charset utf8 collate utf8_bin_ci;-- 切换到school数据库上下文环境use school;-- 创建学院表create table tb_college(collid int not null auto_increment comment &apos;编号&apos;,collname varchar(50) not null comment &apos;名称&apos;,collmaster varchar(20) not null comment &apos;院长&apos;,collweb varchar(511) default &apos;&apos; comment &apos;网站&apos;,primary key (collid));-- 创建学生表create table tb_student(stuid int not null comment &apos;学号&apos;,stuname varchar(20) not null comment &apos;姓名&apos;,stusex bit default 1 comment &apos;性别&apos;,stubirth date not null comment &apos;出生日期&apos;,stuaddr varchar(255) default &apos;&apos; comment &apos;籍贯&apos;,collid int not null comment &apos;所属学院&apos;,primary key (stuid),foreign key (collid) references tb_college (collid));-- alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);-- 创建教师表create table tb_teacher(teaid int not null comment &apos;工号&apos;,teaname varchar(20) not null comment &apos;姓名&apos;,teatitle varchar(10) default &apos;助教&apos; comment &apos;职称&apos;,collid int not null comment &apos;所属学院&apos;,primary key (teaid),foreign key (collid) references tb_college (collid));-- 创建课程表create table tb_course(couid int not null comment &apos;编号&apos;,couname varchar(50) not null comment &apos;名称&apos;,coucredit int not null comment &apos;学分&apos;,teaid int not null comment &apos;授课老师&apos;,primary key (couid),foreign key (teaid) references tb_teacher (teaid));-- 创建选课记录表create table tb_score(scid int auto_increment comment &apos;选课记录编号&apos;,stuid int not null comment &apos;选课学生&apos;,couid int not null comment &apos;所选课程&apos;,scdate datetime comment &apos;选课时间日期&apos;,scmark decimal(4,1) comment &apos;考试成绩&apos;,primary key (scid),foreign key (stuid) references tb_student (stuid),foreign key (couid) references tb_course (couid));-- 添加唯一性约束（一个学生选某个课程只能选一次）alter table tb_score add constraint uni_score_stuid_couid unique (stuid, couid);-- 插入学院数据insert into tb_college (collname, collmaster, collweb) values (&apos;计算机学院&apos;, &apos;左冷禅&apos;, &apos;http://www.abc.com&apos;),(&apos;外国语学院&apos;, &apos;岳不群&apos;, &apos;http://www.xyz.com&apos;),(&apos;经济管理学院&apos;, &apos;风清扬&apos;, &apos;http://www.foo.com&apos;);-- 插入学生数据insert into tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) values(1001, &apos;杨逍&apos;, 1, &apos;1990-3-4&apos;, &apos;四川成都&apos;, 1),(1002, &apos;任我行&apos;, 1, &apos;1992-2-2&apos;, &apos;湖南长沙&apos;, 1),(1033, &apos;王语嫣&apos;, 0, &apos;1989-12-3&apos;, &apos;四川成都&apos;, 1),(1572, &apos;岳不群&apos;, 1, &apos;1993-7-19&apos;, &apos;陕西咸阳&apos;, 1),(1378, &apos;纪嫣然&apos;, 0, &apos;1995-8-12&apos;, &apos;四川绵阳&apos;, 1),(1954, &apos;林平之&apos;, 1, &apos;1994-9-20&apos;, &apos;福建莆田&apos;, 1),(2035, &apos;东方不败&apos;, 1, &apos;1988-6-30&apos;, null, 2),(3011, &apos;林震南&apos;, 1, &apos;1985-12-12&apos;, &apos;福建莆田&apos;, 3),(3755, &apos;项少龙&apos;, 1, &apos;1993-1-25&apos;, null, 3),(3923, &apos;杨不悔&apos;, 0, &apos;1985-4-17&apos;, &apos;四川成都&apos;, 3);-- 插入老师数据insert into tb_teacher (teaid, teaname, teatitle, collid) values (1122, &apos;张三丰&apos;, &apos;教授&apos;, 1),(1133, &apos;宋远桥&apos;, &apos;副教授&apos;, 1),(1144, &apos;杨逍&apos;, &apos;副教授&apos;, 1),(2255, &apos;范遥&apos;, &apos;副教授&apos;, 2),(3366, &apos;韦一笑&apos;, &apos;讲师&apos;, 3);-- 插入课程数据insert into tb_course (couid, couname, coucredit, teaid) values (1111, &apos;Python程序设计&apos;, 3, 1122),(2222, &apos;Web前端开发&apos;, 2, 1122),(3333, &apos;操作系统&apos;, 4, 1122),(4444, &apos;计算机网络&apos;, 2, 1133),(5555, &apos;编译原理&apos;, 4, 1144),(6666, &apos;算法和数据结构&apos;, 3, 1144),(7777, &apos;经贸法语&apos;, 3, 2255),(8888, &apos;成本会计&apos;, 2, 3366),(9999, &apos;审计学&apos;, 3, 3366);-- 插入选课数据insert into tb_score (stuid, couid, scdate, scmark) values (1001, 1111, &apos;2017-09-01&apos;, 95),(1001, 2222, &apos;2017-09-01&apos;, 87.5),(1001, 3333, &apos;2017-09-01&apos;, 100),(1001, 4444, &apos;2018-09-03&apos;, null),(1001, 6666, &apos;2017-09-02&apos;, 100),(1002, 1111, &apos;2017-09-03&apos;, 65),(1002, 5555, &apos;2017-09-01&apos;, 42),(1033, 1111, &apos;2017-09-03&apos;, 92.5),(1033, 4444, &apos;2017-09-01&apos;, 78),(1033, 5555, &apos;2017-09-01&apos;, 82.5),(1572, 1111, &apos;2017-09-02&apos;, 78),(1378, 1111, &apos;2017-09-05&apos;, 82),(1378, 7777, &apos;2017-09-02&apos;, 65.5),(2035, 7777, &apos;2018-09-03&apos;, 88),(2035, 9999, curdate(), null),(3755, 1111, date(now()), null),(3755, 8888, date(now()), null),(3755, 9999, &apos;2017-09-01&apos;, 92); 12345-- 添加主键约束(如果创建表时没有添加)alter table tb_teacher add constraint pk_teacher_teaid primary key(tea_id);-- 添加外键约束(如果创建表时没有添加)alter table tb_teacher add constraint fk_teacher_deptid foreign key(dept_id) references tb_department(dept_id); 1如果外键编号不存在，会报错 表格查询语句 查询所有学生信息 1select * from tb_student; 查询所有课程名称及学分(投影和别名) 1234567select couname as 课程名称, coucredit as 学分 from tb_course;select stuname as 姓名, case stusex when 1 then &apos;男&apos; else &apos;女&apos; end as &apos;性别&apos;from tb_student;select stuname as 姓名, if(stusex, &apos;男&apos;, &apos;女&apos;) as 性别from tb_student; -- 仅适用于mysql 查询所有女学生的姓名和出生日期(筛选) 12select stuname as 学生姓名 , stubirth as 出生日期 from tb_studentwhere stusex = 0; 查询所有80后学生的姓名、性别和出生日期(筛选) 12345select stuname, stusex, stubirth from tb_studentwhere stubirth between &apos;1980-1-1&apos; and &apos;1989-12-31&apos;;select stuname, stusex, stubirth from tb_studentwhere stubirth&gt;&apos;1980-1-1&apos; and stubirth&lt;&apos;1989-12-31&apos;; 查询姓”杨“的学生姓名和性别(模糊) 12select stuname, stusex from tb_studentwhere stuname like &apos;林%&apos; 查询姓”杨“名字两个字的学生姓名和性别(模糊) 12select stuname, stusex from tb_studentwhere stuname like &apos;杨_&apos; 查询姓”杨“名字三个字的学生姓名和性别(模糊) 12select stuname,stusex from tb_studentwhere stuname like &apos;杨__&apos; 查询名字中有”不“字或“嫣”字的学生的姓名(模糊) 12select stuname from tb_studentwhere stuname like &apos;%不%&apos; or &apos;%嫣%&apos;; 查询没有录入家庭住址的学生姓名(空值) 1select stuname from tb_student where stuaddr is null; 查询录入了家庭住址的学生姓名(空值) 1select stuname from tb_student where stuaddr is not null; 查询学生选课的所有日期(去重) 1select distinct scdate from tb_score; 查询学生的家庭住址(去重) 1select distinct stuaddr from tb_student; 查询男学生的姓名和生日按年龄从大到小排列(排序) 123456789101112select stuname, stubirth from tb_studentwhere stusex = 1order by stubirth asc;select stuname, stubirth from tb_studentwhere stusex = 1order by stubirth desc;select stuname, year(now())-year(stubirth) as 年龄 from tb_studentwhere stusex = 1order by 年龄 desc, stuid; 查询年龄最大的学生的出生日期(聚合函数) 1select min(stubirth) from tb_student; 查询年龄最小的学生的出生日期(聚合函数) 1select max(stubirth) from tb_student; 查询男女学生的人数(分组和聚合函数) 12345select stusex,count(*) from tb_studentgroup by stusex;select stusex, min(stubirth) from tb_studentgroup by stusex; 查询课程编号为1111的课程的平均成绩(筛选和聚合函数) 12select avg(scmark) from tb_scorewhere couid = 1111; 查询学号为1001的学生所有课程的平均分(筛选和聚合函数) 12select avg(scmark) from tb_scorewhere stuid = 1001; 查询每个学生的学号和平均成绩(分组和聚合函数) 12select stuid, avg(scmark) from tb_scoregroup by stuid; 查询平均成绩大于等于90分的学生的学号和平均成绩 123select stuid, avg(scmark) as 平均分 from tb_scoregroup by stuidhaving 平均分&gt;90; 查询年龄最大的学生的姓名(子查询) 123456select stuname, stubirth from tb_student;select stuname, min(stubirth) from tb_student;select stuname from tb_studentwhere stubirth = (select min(stubirth) from tb_student); 查询年龄最大的学生姓名和年龄(子查询+运算) 12select stuname, year(now()) - year(stubirth) as 年龄 from tb_studentwhere stubirth = (select min(stubirth) from tb_student); 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算) 123456select stuname from tb_studentwhere stuid in ( select stuid from tb_score group by stuid having count(stuid)&gt;2 ); 查询学生姓名、课程名称以及成绩(连接查询) 1234567select stuname, couname, scmark from tb_student t1, tb_course t2, tb_score t3where t1.stuid=t3.stuid and t2.couid=t3.couid;select stuname, couname, scmark from tb_student t1 inner join tb_course t2 inner join tb_score t3on t1.stuid=t3.stuid and t2.couid=t3.couid; 查询选课学生的姓名和平均成绩(子查询和连接查询) 1234567select stuname, 平均成绩 from tb_student t1,(select stuid,avg(scmark) as 平均成绩 from tb_scoregroup by stuid) t2where t1.stuid = t2.stuid;select stuname, 平均成绩 from tb_student t1 inner join (select stuid,avg(scmark) as 平均成绩 from tb_scoregroup by stuid) t2on t1.stuid = t2.stuid; 查询每个学生的姓名和选课数量(左外连接和子查询) 12345678910111213select stuname, 选课数量 from tb_student t1 inner join (select stuid,count(couid) as 选课数量 from tb_scoregroup by stuid) t2on t1.stuid=t2.stuidorder by 选课数量 desclimit 5 offset 2; -- 跳过2条查5条select stuname, ifnull(选课数量,0) from tb_student t1 left outer join (select stuid,count(couid) as 选课数量 from tb_scoregroup by stuid) t2on t1.stuid=t2.stuidorder by 选课数量 desclimit 1,1; -- 跳过第一查第二条 DCL 授予权限(grant to)和召回权限(revoke from)12345678create user &apos;hellokitty&apos;@&apos;%&apos; identified by &apos;123123&apos;; -- &apos;用户名&apos;@&apos;IP地址&apos;grant all privileges on hrs.* to &apos;hellokitty&apos;@&apos;%&apos;; -- 把hrs数库的所有权限给新建的用户-- 召回新用户的添加、删除、更新的权限revoke insert, delete, update on hrs.* from &apos;hellokitty&apos;@&apos;%&apos;;drop user &apos;hellokitty&apos;@&apos;%&apos;; -- 删掉新用户 视图 查询的快照（简化查询操作） 通过视图可以将用户的访问权限限制到某些指定的列上 1234567-- 创建视图create view vw_emp_dept as select eno, ename, dname from tb_emp t1 inner join tb_dept t2 on t1.dno=t2.dno;-- 使用视图select ename, dname from vw_emp_dept;-- 删除视图drop view vw_emp_dept; 索引(index) 索引可以加速查询所以应该在经常用于查询筛选条件的列上建立索引 索引会使用额外的存储空间而且会让增删改变得更慢（因为要更新索引） 所以不能够滥用索引 1234-- 创建索引create index idx_emp_ename on tb_emp (ename);-- 删除索引drop index idx_emp_ename on tb_emp; explain生成执行计划 1234567explain select eno, ename from tb_emp where eno=7800;explain select eno, ename from tb_emp where eno&lt;&gt;7900;explain select eno, ename from tb_emp where ename=&apos;张三丰&apos;;explain select eno, ename from tb_emp where ename like &apos;张%&apos;;explain select eno, ename from tb_emp where ename like &apos;%张&apos;;explain select eno, ename from tb_emp where ename&lt;&gt;&apos;张三丰&apos;;如果在执行计划中，type类型是all 表示查询语句效率最差，range 次之，const 最好 触发器(trigger) 为什么不用触发器： 在执行增删改操作时可以触发其他的级联操作，在数据量很大的情况下，会导致“锁表”现象，但是有可能导致“锁表”现象，实际开发中应该尽量避免使用触发器 1234567891011121314-- update tb_dept set dno=11 where dno=10;-- delete from tb_dept where dno=11;delimiter $$create trigger tr_dept_update after update on tb_dept for each rowbegin update tb_emp set dno=new.dno where dno=old.dno;end$$delimiter ;drop trigger tr_dept_update; 替代方案： 在添加外键时设置级联操作cascade(cascade 表示级联操作，就是说，如果主键表中被参考字段更新，外键表中也更新，主键表中的记录被删除，外键表中改行也相应删除)默认是 on delete restrict 即不能级联操作 事务（transaction）把多个增删改的操作做成不可分割的原子性操作，要么全部都做，要么全都不做 1234begin; -- 开启事务delete from tb_emp;commit; -- 提交(事务中的所有操作全都生效)rollback; -- 回滚(事务中的所有操作全部撤销) （存储）过程/函数 把一系列的SQL可以封装到一个过程中，而且可以加上分支和循环，将来通过过程的名字直接调用过程即可，因为创建过程时已经提前编译了SQL语句，所以比直接执行SQL语句性能更好 123456789101112131415-- 创建存储过程delimiter $$create procedure sp_dept_avg_sal(deptno int, out avgsal float)begin select avg(sal) into avgsal from tb_emp where dno=deptno;end$$delimiter ;-- 调用存储过程call sp_dept_avg_sal(20, @a);-- 查找存储在@a变量里的数据select @a;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[连接mariadb，使用Nacicat建表(附Linux防火墙方法)]]></title>
    <url>%2F2019%2F04%2F23%2F%E8%BF%9E%E6%8E%A5mariadb%EF%BC%8C%E4%BD%BF%E7%94%A8Nacicat%E5%BB%BA%E8%A1%A8(%E9%99%84Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%96%B9%E6%B3%95)%2F</url>
    <content type="text"><![CDATA[mariadb连接并查看其版本（Ctrl + d - 退出） 创建数据库，创建school并制定字符集为utf8 进入school数据库 查看school下的表 删除school（如果存在school数据库，则删除，不存在则不操作） 使用图形化界面工具（Nacicat）连接 - 试用 输入公网ip，端口，用户名，mariadb的登录密码，连接测试 怎么处理？回到云服务器中的mariadb创建远程连接的用户 让它生效 回到navicat 连接成功，接下来授权，回到云服务器中授权，刷新让它生效 回到navicat，断开重连或刷新，连接成功 按顺序操作创建第一张表 DDLCREATE ： 创建数据库和表等对象 DROP ： 删除数据库和表等对象 ALTER ： 修改数据库和表等对象的结构 DMLSELECT ：查询表中的数据 INSERT ：向表中插入新数据 UPDATE ：更新表中的数据 DELETE ：删除表中的数据 DCLCOMMIT ： 确认对数据库中的数据进行的变更 ROLLBACK ： 取消对数据库中的数据进行的变更 GRANT ： 赋予用户操作权限 REVOKE ： 取消用户的操作权限 Linux防火墙 关闭防火墙 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mariadb</tag>
        <tag>Linux防火墙</tag>
        <tag>建表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git版本控制的安装和使用]]></title>
    <url>%2F2019%2F04%2F20%2FGit%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[下载：wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.21.0.tar.xz 解压缩 xz -d git-2.21.0.tar.xz 解归档 tar -xvf git-2.21.0.tar 进入目录 cd git-2.21.0 补依赖库(必须执行) yum install libcurl-devel 选择路径 ./configure –prefix=/usr/local/ 构建和安装 make &amp;&amp; make install 安装完成，回到用户主目录查看版本 cd ~ git –version Git版本控制使用，进入目录初始化 查看状态 git status 添加所有文件到缓存暂存区 git add . 提交到仓库并附加说明（比如更新了什么功能？） 第一次提交输入 邮箱和用户名 重新提交并查看状态 同步克隆代码到服务器(例如码云平台) git下载 查看克隆下载的文件夹 Git相关命令： git –version git init - 将文件夹初始化为Git仓库 git add - 将工作区的指定文件放入暂存区 git status - 查看工作区和暂存区的状态 git commit -m ‘提交的原因’ - 将暂存区的内容添加到仓库 git log - 查看提交日志（历史提交记录） git checkout – - 将暂存区的文件恢复到工作区 git reset –hard HEAD^ - 回到上一个版本 git reset –hard - 回到指定的版本 git reflog - 查看历史和未来版本 git clone - 克隆代码 git push - 将本地代码推到服务器（将工作成果同步到服务器） git pull - 将服务器更新同步到本地- 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>安装和使用</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安裝并运行redis高速缓存服务（切勿裸行）]]></title>
    <url>%2F2019%2F04%2F20%2F%E5%AE%89%E8%A3%9D%E5%B9%B6%E8%BF%90%E8%A1%8Credis%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%EF%BC%88%E5%88%87%E5%8B%BF%E8%A3%B8%E8%A1%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[下载 ：wget http://download.redis.io/releases/redis-5.0.4.tar.gz 解归档 构建安装 查看版本 启动，ctrl + c 结束 放到後台运行 回车，回到主界面查看状态 后台前台运行的切换（Ctrl + z） 结束redis 设置口令密码 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何安装并连接到MariaDB（MySQL）]]></title>
    <url>%2F2019%2F04%2F20%2F%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%B9%B6%E8%BF%9E%E6%8E%A5%E5%88%B0MariaDB%EF%BC%88MySQL%EF%BC%89%2F</url>
    <content type="text"><![CDATA[下载安装 启动 检测是否打开 连接mysql数据库（默认无密码） 修改数据库登录密码 查看 更新，使密码生效 exit退出设置mysql登录密码完成，重新登录并检测是否需要输入密码mysql -u root -p 查看状态/停止mysql 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>MariaDb</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[添加pip豆瓣镜像下载的两种方式]]></title>
    <url>%2F2019%2F04%2F20%2F%E6%B7%BB%E5%8A%A0pip%E8%B1%86%E7%93%A3%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[普通方式 - 每次下载都需要连接 推荐方式 - 一劳永逸 电脑用户主目录下新建文件夹pip 打开pip文件夹并新建文件pip.ini 在文件中输入：[global]index-url=https://pypi.doubanio.com/simple 保存退出，以后使用pip安装就不用每次连接镜像了 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>豆瓣镜像下载</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典python题目 - 归并排序法]]></title>
    <url>%2F2019%2F04%2F19%2F%E7%BB%8F%E5%85%B8python%E9%A2%98%E7%9B%AE3%20-%20%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%B3%95%2F</url>
    <content type="text"><![CDATA[&quot;&quot;&quot; 归并排序法 &quot;&quot;&quot; def merge_sort(items, le=lambda x, y: x &lt;= y): &quot;&quot;&quot;主函数体&quot;&quot;&quot; if len(items) &lt;= 1: return items mid = len(items) // 2 items1 = merge_sort(items[:mid], le) items2 = merge_sort(items[mid:], le) return merge(items1, items2, le) def merge(items1: list, items2: list, le=lambda x, y: x &lt;= y) -&gt; list: &quot;&quot;&quot;将两个有序列表合并为一个新的有序列表&quot;&quot;&quot; items3 = [] index1, index2 = 0, 0 while index1 &lt; len(items1) and index2 &lt; len(items2): if le(items1[index1], items2[index2]): items3.append(items1[index1]) index1 += 1 else: items3.append(items2[index2]) index2 += 1 items3 += items1[index1:] items3 += items2[index2:] return items3 def main(): &quot;&quot;&quot;执行函数&quot;&quot;&quot; items = [35, 12, 99, 18, 57, 66, 43, 32, 90] print(merge_sort(items)) print(items) if __name__ == &apos;__main__&apos;: main() 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Python经典题目</category>
      </categories>
      <tags>
        <tag>经典python题</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux安全远程链接]]></title>
    <url>%2F2019%2F04%2F18%2FLinux%E5%AE%89%E5%85%A8%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Linux安全远程链接ssh 用戶名(root)@公网ip地址 - 回车输入yes，输入该用户名的密码即可，exit退回到自己的 拷贝单个文件/发送文件 scp 文件路径 用户名@公网ip地址:/需要拷贝到的文件夹路径 拷贝整个文件夹 scp -r 文件夹/ 用户名@公网ip地址:/需要拷贝到的文件夹路径下 网络相关命令： ssh - 安全远程连接 - 例如：ssh root@39.109.190.88 scp - 安全文件拷贝 - 例如：scp -r /root/code root@39.104.170.48:/root/code2 sftp - 安全文件传输（file transfer protocol） - 例如：sftp root@39.104.170.48 put - 上传 get - 下载 bye - 退出 help - 查看帮助 ping - 检查网络可达性 - ICMP - Internet Control Management Protocol - 网络层 ttl - time to live PING TO DEATH - DDoS - Distributed Deny of Service - 分布式拒绝服务攻击 ifconfig / ip 127.0.0.1 - 回环地址 - localhost netstat netstat -nap | grep 进程或者端口 p - process - 查看进程信息（进程编号和进程名字） kill 进程号 启动停止重启服务： service nginx start systemctl start nginx systemctl stop nginx systemctl restart nginx systemctl status nginx systemctl enable nginx systemctl disable nginx 查找命令： grep - 搜索字符串（支持正则表达式） find - 搜索文件 name - 根据名字搜索 - find / -name “*.html” size - 根据大小搜索 - -10M / +10M type - 根据类型搜索 - d / f / l / s atime - 最后访问时间 mtime - 最后修改时间 - find . -mtime 0 ctime - 创建时间 进程操作相关命令： ps - processes kill jobs fg / bg - foreground / background top 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>安全远程链接</tag>
        <tag>重启</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典python题目]]></title>
    <url>%2F2019%2F04%2F18%2F%E7%BB%8F%E5%85%B8python%E9%A2%98%E7%9B%AE2%2F</url>
    <content type="text"><![CDATA[约瑟夫环(如有冒犯信徒，联系我删除) 冒泡排序 常规写法 常规优化后写法 究极写法 你，面试过了，来上班吧！ 最大公约数/最小公倍数 - 递归写法的优化 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Python经典题目</category>
      </categories>
      <tags>
        <tag>经典python题</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典python题目]]></title>
    <url>%2F2019%2F04%2F17%2F%E7%BB%8F%E5%85%B8python%E9%A2%98%E7%9B%AE1%2F</url>
    <content type="text"><![CDATA[五人分鱼 斐波拉契数优化 夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Python经典题目</category>
      </categories>
      <tags>
        <tag>五人分鱼</tag>
        <tag>斐波拉契数优化</tag>
        <tag>经典python题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim宏操作，快速注释多行代码]]></title>
    <url>%2F2019%2F04%2F17%2Fvim%E5%AE%8F%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%B3%A8%E9%87%8A%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[在命令模式下输入q - a 左下角出现recoding模式 0 回到行首 i 进入编辑模式 井号件# （shift+3）注释改行代码 esc 退出，回到命令模式 j 使光标下移一行 q 停止，左下角不显示recoding模式 回到命令模式下输入数字表示几行 4 @ （shift + 2） a 所输入的行数已经被注释掉 ##夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim宏操作</tag>
        <tag>快速注释代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[注册环境变量，使python程序可以在任意文件夹下运行]]></title>
    <url>%2F2019%2F04%2F17%2F%E6%B3%A8%E5%86%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E4%BD%BFpython%E7%A8%8B%E5%BA%8F%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E8%BF%90%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[在root文件夹下 ls -la 查看所有文件使用vim打开并编辑.bash_profile，添加完成保存并退出 使用命令刷新它，完成 运行py文件 - 输入文件名称即可 ##夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>环境变量</tag>
        <tag>全局运行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统下怎么使用vim编译器写python程序并正常运行]]></title>
    <url>%2F2019%2F04%2F17%2FLinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8vim%E7%BC%96%E8%AF%91%E5%99%A8%E5%86%99python%E7%A8%8B%E5%BA%8F%E5%B9%B6%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[如题：求过道和围墙的造价？ 创建快捷方式，使py文件的开头更方便使用 加执行权限，使py文件可以执行或者 运行py文件 - ./ 文件名称 或 python3 文件名称 打分 - pylint 文件名称 ##夏天容易打瞌睡，微信扫一扫lucking coffee送你一杯咖啡喝一喝！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>运行py程序</tag>
        <tag>游泳池问题</tag>
        <tag>加执行权限</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim设置高量、行号、自动缩进等等]]></title>
    <url>%2F2019%2F04%2F16%2Fvim%E8%AE%BE%E7%BD%AE%E9%AB%98%E9%87%8F%E3%80%81%E8%A1%8C%E5%8F%B7%E3%80%81%E8%87%AA%E5%8A%A8%E7%BC%A9%E8%BF%9B%E7%AD%89%E7%AD%89%2F</url>
    <content type="text"><![CDATA[在root目录下创建 .vimrc 使用vim打开.vimrc 添加如下内容并保存(大写ZZ) 查看是否正确 回到root/code目录下新建vim example01.py 练习题： 执行py文件]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>自动缩进</tag>
        <tag>显示行号</tag>
        <tag>vim设置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux - Vim基本使用]]></title>
    <url>%2F2019%2F04%2F16%2FLinux%20-%20Vim%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[启动vim，进入文件所在的目录 vim 文件名 vim的三种模式： 命令模式（按键即代表命令） i 或 a — 编辑模式 # ‘ Esc ‘ 回到命令模式 : 或 / — 末行模式 G - 光标移到文件末尾 500G - 光标移到第500行 gg - 光标移到行首 hjkl - 左下右上（前面可以加数字） Ctrl+y / Ctrl+e - 移动一行 Ctrl+f / Ctrl+b - 翻一页 0 - 光标到行首 $ - 光标到行尾 w - 光标移到下一个单词 dd - 删除光标所在行 100dd - 从光标所在行向下删除100行 dw - 删除一个单词 d0 - 从光标所在的位置删除到行首 d$ - 从光标所在的位置删除到行尾 yy - 复制光标所在行 10yy - 从光标所在行开始复制10行 p - 粘贴 / 5p - 粘贴5遍 u - 撤销 / ctrl+r - 恢复 ： - 輸入 q - 退出 q! - 強制退出 ZZ/:qw - 保存并退出 编辑模式 - 键入内容 ‘ Esc ‘ 回到命令模式 末行模式 - 搜索/配置/执行系统命令 —Enter—&gt; 命令模式set nu - 显示行号 - set nonu syntax on - 显示高亮语法 - syntax off set ts=4 - 修改制表键的空格数 set ruler - 显示光标所在的位置 - set noruler]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>编译器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux软件安装&卸载(安装python3.7)]]></title>
    <url>%2F2019%2F04%2F16%2FLinux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%26%E5%8D%B8%E8%BD%BD(%E5%AE%89%E8%A3%85python3.7)%2F</url>
    <content type="text"><![CDATA[Linux系统下的软件安装： redhat package manager yellowdog updater modified 包管理工具 - yum / rpm / apt yum search nginx - 从默认的仓库搜索有没有指定的软件 yum install -y nginx - 安装软件 yum remove -y nginx - 卸载软件 yum info nginx - 查看软件相关信息 yum list installed - 查看已经安装的软件 yum update nginx - 更新软件 源代码构建安装 - gcc / makeApache - Web服务器Nginx - Web服务器（HTTP服务器）/ 反向代理服务器 源代码构建安装Python3.7 下载 wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz 解压缩和解归档 xz -d Python-3.7.3.tar.xz tar -xvf Python-3.7.3.tar 补充依赖库(安装python的依赖项) yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel 进入Python源代码目录安装前准备工作 cd Python-3.7.3 ./configure –prefix=/usr/local/python37 –enable-optimizations 构建和安装（大约10min)） make &amp;&amp; make install 注册PATH环境变量 cd ~ vim .bash_profile PATH=…:/usr/local/python37/bin（添加进去） 激活环境变量 source .bash_profile 测试安装是否成功 python3 –version]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>卸载</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[认识Linux]]></title>
    <url>%2F2019%2F04%2F16%2F%E8%AE%A4%E8%AF%86linux%2F</url>
    <content type="text"><![CDATA[计算机由硬件和软件构成 计算机硬件的五大部件：运算器、控制器、存储器、输入设备、输出设备计算机软件：系统软件（操作系统、编译程序）和应用软件 操作系统会负责管理和操作硬件，并提供简单的人机交互的接口 Ken Thompson / Dennis Ritchie —&gt; Unix (1970s) Xerox（施乐） —&gt; GUI / 鼠标 / 以太网1980s — IBM PC Unix —&gt; BSD —&gt; AIX (IBM) Unix —&gt; System V —&gt; Solaris (SUN) Uinx —&gt; System III —&gt; HP-UX (HP) Unix —&gt; BSD —&gt; FreeBSD —&gt; Macintosh (Apple) —&gt; macOS —&gt; iOS / watchOS / tvOS Unix —&gt; Minix (Andrew Tanenbaum) —&gt; Linux (Linus Torvalds) —&gt; Android (Google) Linux发行版本 Redhat Ubuntu — 个人 CentOS — 服务器 — 远程访问 Fedora SUSE Debian 个人操作系统： Windows / macOS 服务器操作系统： 商用Unix / Linux / Windows Server 多用户多任务操作系统]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基本操作]]></title>
    <url>%2F2019%2F04%2F16%2FLinux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[掌握：基本使用 / 安装和配置服务 / 部署项目 语法： 命令 命令的参数 命令作用的对象 ls -laR .pipcat -n /proc/cpuinfo cat /proc/cpuinfo 提示：command not found - 命令没有找到（该命令无效） Linux常用命令：w / who / whoami / last - 查看登录用户的情况 adduser / passwd - 创建用户 / 修改创建用户的密码 adduser 用戶名 # 添加用戶 passwd 用戶名 # 設置/修改密碼 date / cal - 查看日期日历 date #查看時間 cal # 查看日历(当月) cal 月 年 # 查看指定月份 write / wall / mesg - 发送消息 write 用户名 - 给指定用户发消息 su 用戶名 - 切換用戶clear - 清除屏幕history - 查看历史输入的命令(输入!编号，即重复执行)history -c - 清除历史输入命令记录 man / info / –help - 查看帮助 logout / exit - 退出登录 reboot - 重启系统 - init 6 shutdown - 关机 - init 0 Linux文件操作相关命令：/ - 根目录 pwd - 查看现在所在目录cd - 改变目录(相对路径和绝对路径)cd .. #回到上一级目录 cd 文件夹名称 # 到该文件夹目录下 cd / # 回到根目录 ls - 列出当前目录下所有的文件/文件夹ls -l # 长格式查看 ls -a # 查看所有文件(隐藏文件)以.点开头的文件 ls -R # 递归式的查看 - 遇到文件夹要递归的列出文件夹下的内容 ls -laR # 递归式查看(遇到文件夹要递归的列出该文件下的内容) cat - 连接多个文件（查看文件的内容）touch - 创建空文件或者修改已有文件的最后访问时间touch 文件名 # 创建空文件 mkdir - 创建文件夹mkdir 文件夹名称 # 创建空文件夹 mkdir -p 一级文件夹名称/二级文件夹名称 # 创建父类子类文件夹 rm - 删除rm 文件名 # 删除指定文件 rmdir 文件名 # 删除空文件夹 rm -f 文件名 # 强制删除(慎用) rm -r 文件名 # 递归删除 - 强制删除该文件夹中所有数据(包括文件夹慎用) wget - 通过网络获取文件(cat 文件名 - 查看文件)wget 网址 -o 新名字(如taobao.html) - 重命名获取文件的名字 例如：wget https://www.baidu.com/ - cat index.heml 例如：wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz 例如：wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz gzip / gunzip - 文件压缩/解压缩（gz/tgz） 例如：gunzip Python-3.7.3.tgz 例如：xz -d Python-3.7.3.xz xz - 文件压缩/解压缩xz -z 文件名 # 压缩 xz -d 文件名称 # 解压缩 tar - 文件归档/解归档例如：tar -xvf Python-3.7.3.tar tar -xvf 文件名称 # 解归档（将一个文件拆成多个文件） tar -cvf 文件名称 # 创建归档文件（压缩，将多个文件合并成一个文件） wc - 查看文件行数、单词数、字符数 wc -l 文件名称 # 查看行数 wc -w 文件名称 # 查看单词数 wc -c 文件名称 # 查看字符数 sort - 文件排序| - 管道，将多个进程连接起来（把前一个命令的输出作为下一个命令的输入）sort -r 文件名称 # 降序（默认是从小到大 - 升序） sort 文件名称 | uniq # 去掉相邻的重复 sort 文件名称1 | uniq &gt; 文件名称2 # sort -r 文件名称1 | uniq &gt; 文件名称2 # uniq 文件名称 - 文件去重（去掉相邻的重复） head / tail - 查看文件的开头/结尾部分 head -10 文件名称 | cat -n # 查看文件内容的前10行 tail -10 文件名称 | cat -n # 查看文件内容的最后10行 more / less - 分页查看文件 cat -n 文件名称 - 查看文件里的所有内容 cat -n 文件名称 | more - 带行号的分页查看 例如：cat -n taobao.html | more diff - 比较文件的差别 diff 文件1 文件2 # 比较不同 &gt; - 输出重定向 &gt;&gt; - 追加输出重定向 2&gt; - 错误输出重定向 2&gt;&gt; - 错误追加输出重定向 cp 文件名称 文件夹地址 - 拷贝文件到指定文件夹目录下 mv 文件名称 文件夹地址 - 移动文件（同一个路径下移动相当于是重命名操作） 给文件添加执行权限chmod u+x,g+x,o+x 文件名 u - user - 当前用户 g - group - 同组用户 o - other - 其他用户 在长格式查看时可以看到文件的权限字符ls -l 文件名 r - read - 读权限 w - write - 写权限 x - execute - 执行权限 组合快捷键：Ctrl+D - 结束输入 Ctrl+C - 中断一个正在执行的命令 Ctrl+W - 删除命令中的一块 Ctrl+A - 光标到行首 Ctrl+E - 光标到行尾 Python - 解释器CPython - C语言实现的Python解释器 Jython - Java语言实现的Python解释器 IronPython - C#语言实现的Python解释器 PyPy - Python语言实现的Python解释器]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux基本操作</tag>
        <tag>常用指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[西比奥尔]]></title>
    <url>%2F2019%2F04%2F15%2F%E4%BA%8E%E7%A6%BB%E5%88%AB%E4%B9%8B%E6%9C%9D%E6%9D%9F%E8%B5%B7%E7%BA%A6%E5%AE%9A%E4%B9%8B%E8%8A%B1%2F</url>
    <content type="text"><![CDATA[我无法意识众生的平等，无法观测世间的本性，但至少我可以判断，你是我的我的希比奥尔。 这世间让人离别的,不是时间,而是永远的相望。就像个天使一样，不是不染凡尘的美，而是在凡尘中依旧保持温和的光。可我是…… 只要艾瑞尔还愿意叫我，那怕不是『妈妈』我也愿意，不管叫我甚么名字，这个名字一定…会成为我的名字。是艾瑞尔你…织出了现在的我。— 我无法意识众生的平等，无法观测世间的本性，但至少我可以判断，你是我的我的希比奥尔。 这世间让人离别的,不是时间,而是永远的相望。 就像个天使一样，不是不染凡尘的美，而是在凡尘中依旧保持温和的光。可我是…… 只要艾瑞尔还愿意叫我，那怕不是『妈妈』我也愿意，不管叫我甚么名字，这个名字一定…会成为我的名字。是艾瑞尔你…织出了现在的我。 我无法意识众生的平等，无法观测世间的本性，但至少我可以判断，你是我的我的希比奥尔。 这世间让人离别的,不是时间,而是永远的相望。 就像个天使一样，不是不染凡尘的美，而是在凡尘中依旧保持温和的光。可我是…… 只要艾瑞尔还愿意叫我，那怕不是『妈妈』我也愿意，不管叫我甚么名字，这个名字一定…会成为我的名字。是艾瑞尔你…织出了现在的我。 有一天，你到了人类的世界，不要去爱上一个人，因为，爱上一个人，会让你真正变成孤单一人。 送走人间种种别离，送走世间种种变迁，逝者如斯，时光永远不会止步，所以，我们会再度与人萍水相逢，相识相知，一同织下我们的人生。 经为流逝的日月。纬为人们的生业。 为了下一次的别离开始一次新的相遇吧。 是你教会了我：悲痛的事，温柔以对；难过的事，坚强以对。 经纱是那流逝的光阴，四季逡巡，尽染层云。纬纱是这人世的浮沉，举步踏堙，荡漾心灵。妖尔夫的子民，只是一心织下昔日，百年不移，究其一生。 在离别前，竖起约定之花 让誓约的花朵，点缀起离别的早晨。 只要在这里，你就不是孤身一人。昔日织会记下，那些漠然被岁月消磨的记忆，那些不得不别过的人儿，也会在昔日织里，与你执手相看泪眼。 爱上一个人，会让你真正变成孤单一人。]]></content>
      <tags>
        <tag>玛奇亚</tag>
        <tag>艾瑞尔</tag>
      </tags>
  </entry>
</search>
